#!/usr/bin/env ruby

require 'optparse'
require_relative '../lib/yi_appium_caps_util.rb'

action = 'help'

options = {}

OptionParser.new do |opts|
  opts.banner = "You.i Utility for appium.txt capabilities"
  puts opts.banner
  platforms = "Supported platforms: ios, android, mac, yimac, yitvos"
  puts platforms

  opts.on("-cPLATFORM", "--create PLATFORM", "creates the appium.txt file for specified platform") do |c|
    options[:create_caps] = c
  end
  opts.on("-fFILE", "--file FILE", "capabilities path and file name (default: ./appium.txt)") do |f|
    options[:file] = f
  end
  opts.on("-u", "--update [PLATFORM]", "update device ID and IP address") do |p|
    options[:update] = true
    options[:platform] = p
  end
  opts.on("-xFORMFACTOR", "--formfactor FORMFACTOR", "update the form factor") do |x|
    options[:form_factor] = x
  end
  opts.on("-h", "--help", "Prints this help") do
    puts opts
    exit
  end
end.parse!

if options[:update] == nil and options[:create_caps] == nil
  puts "You should pass -u or -c PLATFORM as an input argument. Type -h for help"
  exit
end

if options[:update]
  if options[:file] && options[:platform]
    YiAppiumCapsUtil.update(caps_file_name: options[:file], platformName_value: options[:platform])
  elsif options[:file]
    YiAppiumCapsUtil.update(caps_file_name: options[:file])
  elsif options[:platform]
    YiAppiumCapsUtil.update(platformName_value: options[:platform])
  else
    YiAppiumCapsUtil.update
  end    
end

if options[:create_caps]
  if options[:create_caps] && options[:form_factor]
    YiAppiumCapsUtil.create(options[:create_caps].downcase, options[:form_factor].downcase)
  elsif options[:create_caps]
    YiAppiumCapsUtil.create(options[:create_caps].downcase, "handheld")
  end
end
